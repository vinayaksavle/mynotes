SQL Server Notes By Guru Kud Venkat

1. Install SQL Server 2019 Step by Step | Developer Edition | Free Software | Install SSMS

SSMS - Sequel Server Management Studio

- Enterprise and Standard are used for Production use, License costs, Enterprise has more features

- Express and Developer Edition are Free software, Express - 10GB limit, Developer same as Enterprise but for non production use.

- Database Server contains all the tables and data you know any sql server management objects that you create for ex. it could be trigger, view, tables data related to those tables all stored centrally on that database server and to connect to that database the client tool we generally use is SSMS (Sequel Server Management Studio). 

- SSMS is a client tool and not the server by itself. Developer machines (clients) connects to SQL Server using SSMS.

2. Creating altering and dropping a database - Part 2

- A SQL server database can be created, altered and dropped
i) Graphically using SqL Server Management Studio (SSMS) or
ii) Using a Query
Ex - CREATE DATABASE DBName

- The following two files will gets generated
.MDF file - Master Data File (Contains actual data) 
.LDF file - Transaction Log Data file (Used to recover the database)

- To alter DB,
ALTER DATABASE DBName MODIFY NAME = NewDBName

or 

Execute sp_renameDB 'OldDBName','NewDBName'

- To Delete or Drop a database
DROP DATABASE DBName

- Dropping a database, deletes the LDF and MDF files.

- You cannot drop a database, if it is currently in use. You get an error stating - Cannot drop database because it is currently in use.

- So, if other users are connected, you need to put the database in single user mode and then drop the database.
Alter Database DatabaseName SET SINGLE_USER WITH Rollback Immediate

- With Rollback Immediate option, will rollback all incomplete transactions and closes the connection to the database.

Note: System databases cannot be dropped.


3. Creating and working with tables - Part 3
https://www.youtube.com/watch?v=JLeaM8pK8dE&list=PL08903FB7ACA1C2FB&index=4&ab_channel=kudvenkat

- A primary key is used to identify uniquely each record in that table.

ALTER TABLE ForeignKeyTable ADD CONSTRAINT ForeignKeyTable_ForeignKeyColumn_FK FOREIGN KEY (ForeignKeyColumn) REFERENCES PrimaryKeyTable (PrimaryKeyColumn)

- Foreign keys are used to enforce database integrity. In layman's terms, A foreign key in one table points to a primary key in another table. The foreign key constraint prevents invalid data from being inserted into the foreign key column, has to be one of the values contained in the table it points to. 

4. Adding a default constraint - Part 4

- A column default can be specified using Default constraint. The DEFAULT constraint is used to insert a default value into a column. The default value will be added to all new records, if no other value is specified, including NULL.

Syntax:
Altering an existing column to add a default constraint:
ALTER TABLE {TABLE_NAME}
ADD CONSTRAINT {CONSTRAINT_NAME}
DEFAULT {DEFAULT_VALUE} FOR {EXISTING_COLUMN_NAME}

Adding a new column, with default value, to an existing table:
ALTER TABLE {TABLE_NAME}
ADD {COLUMN_NAME} {DATA_TYPE} {NULL | NOT NULL}
CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE}

Dropping a constarint:
ALTER TABLE {TABLE_NAME}
DROP CONSTRAINT {CONSTRAINT_NAME}

5. Cascading referential integrity constraint - Part 5

- Cascading referential integrity constraint allows to define the actions Microsoft SQL Server should take when a user attempts to delete or update a key to which an existing foreign keys points.

- For example, If you try to delete primary key of one table whose foreign key relation is there in other table column you will get error. So, Cascading referential integrity constraint can be used to define actions Microsoft SQL Server should take when this happens. By default, we get an error and the DELETE or UPDATE statement is roller back.

* Options when setting up Cascading referential integrity constraint:

i) No Action: This is the default behavior. No Action specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, an error s raised and the DELETE or UPDATE is rolled back.

ii) Cascade: Specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, all rows containing those foreign keys are also deleted or updated.

iii) Set NULL: Specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, all rows containing those foreign keys are set to NULL.

iv) Set Default: Specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, all rows containing those foreign keys are set to default values.

6. Adding a check constraint - Part 6

- CHECK constraint is used to limit the range of the values, that can be entered for a column.

Syntax:
ALTER TABLE {TABLE_NAME}
ADD CONSTRAINT {CONSTRAINT_NAME} CHECK {BOOLEAN_EXPRESSION}

- If the BOOLEAN_EXPRESSION returns true, then the CHECK constraint allows the value, otherwise it doesn't. Since, AGE is a nullable column, it's possible to pass null for this column, when inserting a row. When you pass NULL for the AGE column, the boolean expression evaluates to UNKNOWN, and allows the value.

7. Identity Column in SQL Server - Part 7
https://www.youtube.com/watch?v=aOkFE6NLGCQ&list=PL08903FB7ACA1C2FB&index=8

- If a column is marked as an identity column, then the values for this column are automatically generated, when you insert a new row into the table.

Ex - CREATE TABLE tblPerson(
Id int identity(1,1) Primary Key
) 

- To explicitly supply a value for identity column
i. First turn on identity insert - SET Identity_Insert tblPerson ON
ii. In the insert query specify the column list
INSERT INTO tblPerson(Id,Name)values(2,'vvs')

- If you have deleted all the rows in a table, and you want to reset the identity column value, use DBCC CHECKIDENT command.
Ex: DBCC CHECKIDENT('tblPerson',RESEED,0)


8. How to get the last generated identity column value in SQL Server - Part 8

- Identity column values are auto generated. There are several ways in SQL server, to retrieve the last identity value that is generated. The most common way is to use SCOPE_IDENTITY() build in function.

Note: You can also use @@IDENTITY and IDENT_CURRENT('tableName')

Session - It is connection to the SQL Server.
Difference:
SCOPE_IDENTITY() - Same session and the same scope. Prefer this.
@@IDENTITY - Same session and across any scope.
IDENT_CURRENT('TableName') - Specific table across any session and any scope.

https://www.youtube.com/watch?v=n1iwngG_zNY&list=PL08903FB7ACA1C2FB&index=9

Do watch video
!Important for blog topic.

9. Unique key constraint - Part 9

- We use UNIQUE constarint to enforce uniqueness of a column i.e, the column shouldn't allow any duplicate values. We can add a unique constraint through the designer or using a query.

- To create the unique key using a query:
ALTER TABLE table_name
ADD CONSTRAINT constraint_name UNIQUE(column_name)

- But primary key and unique key are used to enforce, the uniqueness of a column. So, when do you chosse one over the other ?
A table can have, only one primary key. If you want to enforce uniqueness on 2 or more columns, then we use unique key constraint.

- What is the difference betwen Primary key constraint and Unique key constraint ?
i. A table can have only one primary key, but more than one unique key.
ii. Primary key does not allow nulls, where as unique key allows one null.

10. Select statement in sql server - Part 10
- selecting distinct rows
SELECT DISTINCT Name,City FROM tblPerson

It distinct name and city columns so there are chances that duplicate city might come but rows will be distinct.

- Wild Cards
% - Specifies zero or more characters
_ - Specifies exactlt one character.
[] - Any character with in the brackets
[^] - Not any character with in the brackets.

Ex -
SELECT * FROM tblPerson WHERE email LIKE '_@_.com'
// A@A.com

SELECT * FROM tblPerson WHERE Name LIKE '[MST]%'
// Tom,Mary,Sam

SELECT top 5 * from tblPerson
SELECT top 50 Percent * from tblPerson

11. Group by in sql server - Part 11

https://www.youtube.com/watch?v=FKSSOpQe5Jc&list=PL08903FB7ACA1C2FB&index=12

- Group by clause is used to group a selected set of rows into a set of summary rows by the value of one or more columns or expressions. It is always used in conjunction with one or more aggregate function.

- Filtering Groups:
WHERE clause is used to filter rows before aggregation, where as HAVING class is used to filter groups after aggregation. The following 2 queries produce the same result.
Ex -
SELECT City, SUM(Salary) as Total FROM tblEmployee WHERE city = 'London' GROUP BY City

SELECT City, SUM(Salary) as Total FROM tblEmployee GROUP BY City HAVING CITY = 'London'

Note: From a performance standpoint, you cannot say that one method is less efficient than the other. SQL Server optimizer analyzes each statement and selects an efficient way of executing it. As a best practice, use the syntax that clearly describes the desired result. Try to eliminate rows that you wouldn't need, as early as possible.

- Difference WHERE and HAVING
i. WHERE clause can be used with - Select, Insert and Update statements, where as HAVING clause can only be used with the Select statement.

ii. WHERE filters rows before aggregation (GROUPING), where as, HAVING filter groups, after the aggregations are performed.

iii. Aggregate functions cannot be used in the WHERE clause, unless it is in a sub query contained in a HAVING clause, whereas, aggregate functions can be used in HAVING clause.

Ex - HAVING SUM(SALARY) > 5000

12. Joins in sql server - Part 12

- JOINS in SQL Server are used to retrieve data from 2 or more related tables. In general tables are related to each other using foreign key constraints.

- In SQL Server, there are different types of JOINS
i. INNER JOIN
ii. OUTER JOIN
iii. CROSS JOIN

OUTER Joins are again divided into
i. LEFT JOIN OR LEFT OUTER JOIN
ii. RIGHT JOIN OR RIGHT OUTER JOIN
iii. FULL JOIN OR FULL OUTER JOIN

- CROSS JOIN
It produces, the Cartesian product of the 2 tables involved in the JOIN. For ex, In the Employee table we have 10 rows and in the Department table we have 4 rows. So, a cross join between these 2 tables produces 40 rows.

Note: CROSS JOIN shouldn't have ON clause.
SELECT Name, Gender, Dep FROM tblEmployee CROSS JOIN tblDepartment

13. Advanced or intelligent joins in sql server - Part 13
https://www.youtube.com/watch?v=GKGtOABAO9s&list=PL08903FB7ACA1C2FB&index=14

- INNER JOIN (Only Matching rows)
SELECT [Column] FROM tblEmployee E INNER JOIN tblDepartment D ON E.DeptId = D.Id

- LEFT JOIN (Matching rows + Left table non-Matching rows)
SELECT [Column] FROM tblEmployee E LEFT JOIN tblDepartment D ON E.DeptId = D.Id

- RIGHT JOIN (Matching rows + Right table non-Matching rows)
SELECT [Column] FROM tblEmployee E RIGHT JOIN tblDepartment D ON E.DeptId = D.Id

- FULL JOIN ((Matching rows + both table non-Matching rows))
SELECT [Column] FROM tblEmployee E FULL JOIN tblDepartment D ON E.DeptId = D.Id

- Non-matching rows from LEFT table
SELECT [Column] FROM tblEmployee E LEFT JOIN tblDepartment D ON E.DeptId = D.Id WHERE D.Id IS NULL

- Non-matching rows from RIGHT table
SELECT [Column] FROM tblEmployee E RIGHT JOIN tblDepartment D ON E.DeptId = D.Id WHERE E.DeptId IS NULL

- Non-matching rows from both table
SELECT [Column] FROM tblEmployee E FULL JOIN tblDepartment D ON E.DeptId = D.Id WHERE D.Id IS NULL OR E.DeptId IS NULL

14. Self join in sql server - Part 14

- Joining a table with itself is called as SELF JOIN.
SELF JOIN is not a different type of JOIN.

It can be classified under any type of JOIN:
i. INNER
ii. OUTER (Left,Right,Full)
iii. CROSS Joins

- Take a scenario there is employee table in which all employee data is present with managerid. To get manager name based on its id write query use self join.
-- LEFT OUTER SELF JOIN 
SELECT E.Name AS Employee, M.Name AS Manager FROM tblEmployee E LEFT JOIN tblEmployee M ON E.ManagerId = M.EmployeeId

-- RIGHT OUTER SELF JOIN 
SELECT E.Name AS Employee, M.Name AS Manager FROM tblEmployee E RIGHT JOIN tblEmployee M ON E.ManagerId = M.EmployeeId

-- CROSS OUTER SELF JOIN 
SELECT E.Name AS Employee, M.Name AS Manager FROM tblEmployee E CROSS JOIN tblEmployee M ON E.ManagerId = M.EmployeeId


15. Different ways to replace NULL in sql server - Part 15

- Three ways to replace NULL values - ISNULL() Function, CASE Statement & COALESCE() Function

SELECT E.Name AS Employee, ISNULL(M.Name, 'No Manager') AS Manager FROM tblEmployee E LEFT JOIN tblEmployee M ON E.ManagerId = M.EmployeeId

SELECT E.Name AS Employee, CASE WHEN M.Name IS NULL THEN 'No Manager' ELSE M.Name END AS Manager FROM tblEmployee E LEFT JOIN tblEmployee M ON E.ManagerId = M.EmployeeId

SELECT E.Name AS Employee, COALESCE(M.Name, 'No Manager') AS Manager FROM tblEmployee E LEFT JOIN tblEmployee M ON E.ManagerId = M.EmployeeId

16. Coalesce function in sql server Part 16

- COALESCE() Function - Returns the first NON NULL value.

- Take a scenario where you want employee name if first name is null then check middle name if that is also null then check last name.

SELECT Id, COALESCE(FirstName, MiddleName, LastName) AS Name FROM tblEmployee

17. Union and union all in sql server Part 17

- UNION and UNION ALL operators in SQL Server, are used to combine the result-set of two or more SELECT queries.

Note: For UNION and UNION ALL to work, the Number, Data types and the order of the columns in the select statements should be same.

- Difference between UNION and UNION ALL
i. UNION removes duplicate rows, where as UNION ALL does not
ii. UNION has to perform distinct sort to remove duplicates, which makes it less faster than UNION ALL.

Note: Estimated query execution plan - CTRL + L

- Sorting results of UNION or UNION ALL
ORDER BY clause should be used only on the last SELECT statement in the UNION query.

- Difference between UNION and JOIN
UNION combines the result set of two or more select queries into a single result set which includes all the rows from all the queries in the union, where as JOINS, retrieve data from two or more tables based on logical relationships between the tables.

In short, UNION combines rows from 2 or more tables, where JOINS combine columns from 2 or more table.

18. Stored procedures in sql server Part 18
https://www.youtube.com/watch?v=Qu3E-oncF3g&list=PL08903FB7ACA1C2FB&index=19

- A store procedure is group of T-SQL (Transact SQL) statements. If you have a situation, where you write the same query over and over again, you can save that specific query as a stored procedure and call it just by its name.

- Note: When naming user defined stored procedures, Microsoft recommends not to use sp_ as a prefix. All system stored procedures, are prefixed with sp_. This avoids any ambiguity between user defined and system stored procedures and any conflicts, with some future system procedure.

Ex - 
CREATE PROCEDURE spGetEmployees
AS 
BEGIN
	SELECT Name,Gender FROM tblEmployee
END

spGetEmployees or EXEC spGetEmployees or Execute spGetEmployees

- Parameters and variables have an @ prefix in their name.
Ex -
EXEC spGetEmployees 'Male',1
EXEC spGetEmployees @Gender='Male',@Department=1

- To view the tex, of stored procedure
i. Use system stored procedure sp_helptext 'SPName' OR
ii. Right click the SP in Object explorer -> Script Procedure as -> Create To -> New Query Editor window

- To change the store procedure, use ALTER PROCEDURE statement.

To delete the SP, use DROP PROC 'SPName' or DROP PROCEDURE 'SPName'

To encrypt the text of the SP, use WITH ENCRYPTION option. It is not possible to view the text of an encrypted SP. 

Ex - 
CREATE PROCEDURE spGetEmployees
@Gender nvarchar(20),
@DepartmentId int
AS 
BEGIN
	SELECT Name,Gender FROM tblEmployee WHERE Gender = @Gender AND DepartmentId = @DepartmentId
END

19. Stored procedures with output parameters Part 19

- To create an SP with output parameter, we use the keywords OUT or OUTPUT.

Ex - 
CREATE PROCEDURE spGetEmployees
@Gender nvarchar(20),
@EmployeeeCount int Output
AS
BEGIN
	SELECT @EmployeeeCount = COUNT(Id) FROM tblEmployee WHERE Gender = @Gender
END

DECLARE @EmployeeeTotal int
exec spGetEmployees 'Male',@EmployeeeTotal OUTPUT

or
exec spGetEmployees @EmployeeeCount = @EmployeeeTotal OUT, @Gender = 'Male'
PRINT @EmployeeeTotal

- If you don't specify the OUTPUT keyword, when executing the stored procedure, the @EmployeeeTotal variable will be NULL.

- Useful system stored procedures
sp_help procedure_name - View the information about the stored procedure, like parameter names, their datatypes etc. sp_help can be used with any database object, like tables,views, SP's, triggers etc. Alternatively, you can also press ALT + F1, when the name of the object is highlighted.

sp_helptext procedure_name - View the Text of the stored procedure

sp_depends procedure_name - View the dependencies of the stored procedure. This system SP is very useful, especially if you want to check, if there are any stored procedures that are referencing a table that you are about to drop. sp_depends can also be used with other database objects like table etc.

20. Stored procedure output parameters or return values Part 20

- Whenever you execute a stored procedure, it returns an integer status variable.Usually, zero indicates success, and non-zero indicates failure.
Ex -
CREATE Procedure spGetTotalCountOfEmployee
As
BEGIN
return (SELECT COUNT(ID) FROM tblEmployee)
END

Declare @Total int
Execute @Total = spGetTotalCountOfEmployee
SELECT @Total

So, we are able to achieve what we want, using output parameters as well as return values.

- Return values you can use only where return type is integer. If in above example we try to return Name it will throw error for return saying conversion failed. Also you can return only single value using return but with output we can return multiple values.

- Return Values
Only integer Datatype
Only one value
use to convey success or failure

VS

- Output Parameters
Any Datatype
More than one value
Use to return values like name, count etc.

21. Advantages of stored procedures Part 21

- Execution plan retention and reusability
- Reduces network traffic
- Code reusability and better maintainability
- Better Security
- Avoids SQL Injection Attack

22. Built in string functions in sql server 2008 Part 22
https://www.youtube.com/watch?v=qJFr-R76r9A&list=PL08903FB7ACA1C2FB&index=23&ab_channel=kudvenkat

1. ASCII(Character_Expression) - Returns the ASCII code of the given character expression.
2. CHAR(Integer_Expression) - Converts an int ASCII code to a character. The Integer_Expression, should be between 0 and 255.
3. LTRIM(Character_Expression) - Removes blanks on the left handside of the given character expression.
4. RTRIM(Character_Expression) - Removes blanks on the right hand side of the given character expression.
5. LOWER(Character_Expression) - Converts all the characters in the given Character_Expression, to lowercase letters.
6. UPPER(Character_Expression) - Converts all the characters in the given Character_Expression, to uppercase letters.
7. REVERSE('Any_String_Expression') - Reverses all the characters in the given string expression.
8. LEN(String_Expression) - Returns the count of total characters, in the given string expression, excluding the blanks at the end of the expression.

23. LEFT, RIGHT, CHARINDEX and SUBSTRING functions in sql server Part 23

1. LEFT (Character_Expression, Integer_Expression) - Returns the specified number of characters from the left hand side of the given character expression.

2. RIGHT(Character_Expression, Integer_Expression) - Returns the specified number of characters from the right hand side of the given character expression.

3. CHARINDEX('Expression_To_Find','Expression_To_Search','Start_Location') - Returns the starting position of the specified expression in a character string.

4. SUBSTRING('Expression','Start','Length') - Returns substring (part of the string), from the given expression.

24. Replicate, Space, Patindex, Replace and Stuff string functions in sql server 2008 Part 24
https://www.youtube.com/watch?v=ALnM6d7OQUs&list=PL08903FB7ACA1C2FB&index=25

- REPLICATE(String_To_Be_Replicated, Number_Of_Times_To_Replicate) - Repeats the given string, for the specified number of times.

Ex - Mask the email with 5 * (star) symbols
SELECT FirstName, LastName, SUBSTRING(Email, 1, 2) + REPLICATE('*',5) + SUBSTRING(Email, CHARINDEX('@',Email), LEN(Email) - CHARINDEX('@',Email)+1) as Email FROM tblEmployee

O/P - Sam@aaa.com -> Sa*****@aaa.com

- SPACE(Number_of_Spaces) - Returns number of spaces, specified by the Number_of_Spaces argument.

Ex - The SPACE(5) function, inserts 5 spaces between FirstName and LastName.

SELECT FirstName + SPACE(5) + LastName as FullName from tblEmployee.

- PATINDEX('%Pattern%', Expression) - Returns the starting position of the first occurence of a pattern in a specified expression. It takes two arguments, the pattern to be searched and the expression. PATINDEX() is similar to CHARINDEX(). With CHARINDEX() we cannot use wildcards, wehre as PATINDEX() provides this capability. If the specified pattern is not found, PATINDEX() returns ZERO.

SELECT PATINDEX('%@aaa.com',Email) FROM tblEmployee WHERE PATINDEX('%@aaa.com',Email) > 0

O/P - Sam@aaa.com - 4

- REPLACE(String_Expression,Replacement_Value) - Replaces all occurences of a specified string value with another string value.

Ex - All.COM strings are replaces with .NET
SELECT Email, REPLACE(Email, '.com', '.net') from tblEmployee.

O/P - Sam@aaa.com -> Sam@aaa.net

- STUFF(Original_Expression, Start, Length, replacement_expression) - It inserts Replacement_expression, at the start position specified, along with removing the characters specified using Length parameter.

Ex - SELECT STUFF(Email, 2, 3, '*****') FROM tblEmployee

O/P - Sam@aaa.com -> S*****aaa.com


25. DateTime functions in SQL Server Part 25
https://www.youtube.com/watch?v=6_95vbBrrXI&list=PL08903FB7ACA1C2FB&index=26

- UTC stands for Coordinated Universal Time, based on which the world regulates clocks and time. There are slight differences between GMT and UTC, but for most common puposes, UTC is synonymous with GMT.

- time 
Format - hh:mm:ss[.nnnnnnn]
Range - 00:00:00.0000000 through 23:59:59.9999999

- date
Format - YYYY -MM-DD
Range - 00001-01-01 through 9999-12-31

- smalldatetime 
Format - YYYY-MM-DD hh:mm:ss
Range - 1900-01-01 throgh 2079-06-06

- datetime
Format - YYYY-MM-DD hh:mm:ss[.nnn]
Range - 1753-01-01 through 9999-12-31

- datetime2
Format - YYYY-MM-DD hh:mm:ss[.nnnnnnn]

- datetimeoffset
Format - YYYY-MM-DD hh:mm:ss[.nnnnnnn] [+|-] hh:mm

- GETDATE(), CURRENT_TIMESTAMP, SYSDATETIME(), SYSDATETIMEOFFSET(), GETUTCDATE(), SYSUTCDATETIME()

26. IsDate, Day, Month, Year and DateName DateTime functions in SQL Server Part 26

- ISDATE() - Checks if the given value, is a valid date, time, or datetime. Returns 1 for success, 0 for failure.

SELECT ISDATE(GETDATE()) -- returns 1
SELECT ISDATE('2012-09-01 11:34::21.1918447') -- returns 0

Note: For datetime2 values, IsDate return ZERO

- DAY() - Returns the 'Day number of the Month' of the given date 
SELECT DAY('01/31/2012') -- Returns 31

- Month() - Returns the 'Month number of the year' of the given date 
SELECT DAY('01/31/2012') -- Returns 1

- Year() - Returns the 'Year number' of the given date
SELECT YEAR('01/31/2012') -- Returns 2012

- DateName(DatePart, Date) - Returns a string, that represents the part of the given date. This function takes 2 parameters. The first parameter DatePart specifies, the part of the date, we want. The second parameter, is the actual date, from which we want the part of the Date.

DatePart - year, quarter, month, dayofyear, day, week, weekday, hour, minute, second, milisecond, microsecond, nanosecond, TZoffset

Ex - SELECT DATENAME(WEEKDAY,GETDATE()) as Day From tblEmployees.

27. DatePart, DateAdd and DateDiff functions in SQL Server Part 27

https://www.youtube.com/watch?v=eYsizQVa_EU&list=PL08903FB7ACA1C2FB&index=28

- DatePart(DatePart, Date) - Returns an integer representing the specified DatePart. This function is similar to DateName(). DateName() returns nvarchar, where as DatePartb returns as integer.

Examples:
Select DATEPART(weekday, '2012-08-30 19:45:31.793') -- returns 5
Select DATENAME(weekday, '2012-08-30 19:45:31.793') -- returns Thursday

- DATEADD(datepart, NumberToAdd, date) Returns the DateTime, after adding specified NumberToAdd, to the datepart specified of the given date.

Examples:
Select DateAdd(DAY, 20, '2012-08-30 19:45:31.793') 
-- Returns 2012-09-19 19:45:31.793
Select DateAdd(DAY, -20, '2012-08-30 19:45:31.793') 
-- Returns 2012-08-10 19:45:31.793

- DATEDIFF(datepart, startdate, enddate) - Returns the count of the specified datepart boundries crossed between the specified startdate and enddate.

Examples:
Select DATEDIFF(MONTH, '11/30/2005','01/31/2006') -- returns 2
Select DATEDIFF(DAY, '11/30/2005','01/31/2006') -- returns 62

- Calculating Age Function
DOB - 1980-12-30 -> 31 Years 8 Months 2 Days old

CREATE FUNCTION fnComputeAge(@DOB DATETIME)
RETURNS NVARCHAR(50)
AS
BEGIN

DECLARE @tempdate DATETIME, @years INT, @months INT, @days INT
SELECT @tempdate = @DOB

SELECT @years = DATEDIFF(YEAR, @tempdate, GETDATE()) - CASE WHEN (MONTH(@DOB) > MONTH(GETDATE())) OR (MONTH(@DOB) = MONTH(GETDATE()) AND DAY(@DOB) > DAY(GETDATE())) THEN 1 ELSE 0 END
SELECT @tempdate = DATEADD(YEAR, @years, @tempdate)

SELECT @months = DATEDIFF(MONTH, @tempdate, GETDATE()) - CASE WHEN DAY(@DOB) > DAY(GETDATE()) THEN 1 ELSE 0 END
SELECT @tempdate = DATEADD(MONTH, @months, @tempdate)

SELECT @days = DATEDIFF(DAY, @tempdate, GETDATE())

DECLARE @Age NVARCHAR(50)
SET @Age = Cast(@years AS  NVARCHAR(4)) + ' Years ' + Cast(@months AS  NVARCHAR(2))+ ' Months ' +  Cast(@days AS  NVARCHAR(2))+ ' Days Old'
RETURN @Age

End

Using the function in a query to get the expected output along with the age of the person.
Select Id, Name, DateOfBirth, dbo.fnComputeAge(DateOfBirth) as Age from tblEmployees

28. Cast and Convert functions in SQL Server Part 28

- To convert one data type to another, CAST and CONVERT functions can be used. 

Syntax of CAST and CONVERT functions from MSDN:
CAST ( expression AS data_type [ ( length ) ] )
CONVERT ( data_type [ ( length ) ] , expression [ , style ] )

From the syntax, it is clear that CONVERT() function has an optional style parameter, where as CAST() function lacks this capability.

- The following 2 queries convert, DateOfBirth's DateTime datatype to NVARCHAR. The first query uses the CAST() function, and the second one uses CONVERT() function. The output is exactly the same for both the queries as shown below.
Select Id, Name, DateOfBirth, CAST(DateofBirth as nvarchar) as ConvertedDOB
from tblEmployees
Select Id, Name, DateOfBirth, Convert(nvarchar, DateOfBirth) as ConvertedDOB
from tblEmployees

Ex - 
1980-12-30 00:00:00.000 -> Dec 30 1980 12:00AM

- Now, let's use the style parameter of the CONVERT() function, to format the Date as we would like it. In the query below, we are using 103 as the argument for style parameter, which formats the date as dd/mm/yyyy.
Select Id, Name, DateOfBirth, Convert(nvarchar, DateOfBirth, 103) as ConvertedDOB
from tblEmployees

Ex -
1980-12-30 00:00:00.000 -> 30/12/1980

The following table lists a few of the common DateTime styles:
101 - mm/dd/yyyy
102 - yy.mm.dd
103 - dd/mm/yyyy
104 - dd.mm.yy
105 - dd-mm-yy

- In SQL Server 2008, Date datatype is introduced, so you can also use
SELECT CAST(GETDATE() as DATE)
SELECT CONVERT(DATE, GETDATE())

Note: To control the formatting of the Date part, DateTime has to be converted to NVARCHAR using the styles provided. When converting to DATE data type, the CONVERT() function will ignore the style parameter.

- In this query, we are using CAST() function, to convert Id (int) to nvarchar, so it can be appended with the NAME column. If you remove the CAST() function, you will get an error stating - 'Conversion failed when converting the nvarchar value 'Sam - ' to data type int.'
Select Id, Name, Name + ' - ' + CAST(Id AS NVARCHAR) AS [Name-Id]
FROM tblEmployees

Sam - 1

- Write a query which returns the total number of registrations by day

Query :
Select CAST(RegisteredDate as DATE) as RegistrationDate,
COUNT(Id) as TotalRegistrations
From tblRegistrations
Group By CAST(RegisteredDate as DATE)

- CAST vs CONVERT
1. Cast is based on ANSI (American National Standards Institute) standard and Convert is specific to SQL Server. So, if portability is a concern and if you want to use the script with other database applications, use Cast(). 
2. Convert provides more flexibility than Cast. For example, it's possible to control how you want DateTime datatypes to be converted using styles with convert function.

The general guideline is to use CAST(), unless you want to take advantage of the style functionality in CONVERT().


29. Mathematical functions in sql server Part 29

- ABS ( numeric_expression ) - ABS stands for absolute and returns, the absolute (positive) number. 

For example, Select ABS(-101.5) -- returns 101.5, without the - sign.

- CEILING ( numeric_expression ) and FLOOR ( numeric_expression )
CEILING and FLOOR functions accept a numeric expression as a single parameter. CEILING() returns the smallest integer value greater than or equal to the parameter, whereas FLOOR() returns the largest integer less than or equal to the parameter. 

Examples:
Select CEILING(15.2) -- Returns 16
Select CEILING(-15.2) -- Returns -15

Select FLOOR(15.2) -- Returns 15
Select FLOOR(-15.2) -- Returns -16

- Power(expression, power) - Returns the power value of the specified expression to the specified power.

Example: The following example calculates '2 TO THE POWER OF 3' = 2*2*2 = 8
Select POWER(2,3) -- Returns 8

- SQUARE ( Number ) - Returns the square of the given number.

Example:
Select SQUARE(9) -- Returns 81

- SQRT ( Number ) - SQRT stands for Square Root. This function returns the square root of the given value.

Example:
Select SQRT(81) -- Returns 9

- RAND([Seed_Value]) - Returns a random float number between 0 and 1. Rand() function takes an optional seed parameter. When seed value is supplied the 

RAND() function always returns the same value for the same seed.

Example:
Select RAND(1) -- Always returns the same value

If you want to generate a random number between 1 and 100, RAND() and FLOOR() functions can be used as shown below. Every time, you execute this query, you get a random number between 1 and 100.
Select FLOOR(RAND() * 100)

The following query prints 10 random numbers between 1 and 100.
Declare @Counter INT
Set @Counter = 1
While(@Counter <= 10)
Begin
 Print FLOOR(RAND() * 100)
 Set @Counter = @Counter + 1
End

- ROUND ( numeric_expression , length [ ,function ] ) - Rounds the given numeric expression based on the given length. This function takes 3 parameters. 
1. Numeric_Expression is the number that we want to round.
2. Length parameter, specifies the number of the digits that we want to round to. If the length is a positive number, then the rounding is applied for the decimal part, where as if the length is negative, then the rounding is applied to the number before the decimal.
3. The optional function parameter, is used to indicate rounding or truncation operations. A value of 0, indicates rounding, where as a value of non zero indicates truncation. Default, if not specified is 0.

Examples:
-- Round to 2 places after (to the right) the decimal point
Select ROUND(850.556, 2) -- Returns 850.560
Select ROUND(850.554, 2) -- Returns 850.550
Select ROUND(850.544, 1) -- Returns 850.500
Select ROUND(850.554, 1) -- Returns 850.600

-- Truncate anything after 2 places, after (to the right) the decimal point
Select ROUND(850.556, 2, 1) -- Returns 850.550

-- Round to 1 place after (to the right) the decimal point
Select ROUND(850.556, 1) -- Returns 850.600

-- Truncate anything after 1 place, after (to the right) the decimal point
Select ROUND(850.556, 1, 1) -- Returns 850.500

-- Round the last 2 places before (to the left) the decimal point
Select ROUND(850.556, -2) -- 900.000

-- Round the last 1 place before (to the left) the decimal point
Select ROUND(850.556, -1) -- 850.000

30. Scalar user defined functions in sql server Part 30

- In SQL Server there are 3 types of User Defined functions
1. Scalar functions
2. Inline table-valued functions
3. Multistatement table-valued functions

- Scalar functions may or may not have parameters, but always return a single (scalar) value. The returned value can be of any data type, except text, ntext, image, cursor, and timestamp.

To create a function, we use the following syntax:
CREATE FUNCTION Function_Name(@Parameter1 DataType, @Parameter2 DataType,..@Parametern Datatype)
RETURNS Return_Datatype
AS
BEGIN
    Function Body
    Return Return_Datatype
END

- Let us now create a function which calculates and returns the age of a person. To compute the age we require, date of birth. So, let's pass date of birth as a parameter. So, AGE() function returns an integer and accepts date parameter.
Ex -
CREATE FUNCTION Age(@DOB Date)  
RETURNS INT  
AS  
BEGIN  
 DECLARE @Age INT  
 SET @Age = DATEDIFF(YEAR, @DOB, GETDATE()) - CASE WHEN (MONTH(@DOB) > MONTH(GETDATE())) OR (MONTH(@DOB) = MONTH(GETDATE()) AND DAY(@DOB) > DAY(GETDATE())) THEN 1 ELSE 0 END  
 RETURN @Age  
END


When calling a scalar user-defined function, you must supply a two-part name, OwnerName.FunctionName. dbo stands for database owner.
Select dbo.Age( dbo.Age('10/08/1982')

You can also invoke it using the complete 3 part name, DatabaseName.OwnerName.FunctionName.
Select SampleDB.dbo.Age('10/08/1982')

- Scalar user defined functions can be used in the Select clause as shown below.
Select Name, DateOfBirth, dbo.Age(DateOfBirth) as Age from tblEmployees

- Scalar user defined functions can be used in the Where clause, as shown below.
Select Name, DateOfBirth, dbo.Age(DateOfBirth) as Age 
from tblEmployees
Where dbo.Age(DateOfBirth) > 30

- A stored procedure also can accept DateOfBirth and return Age, but you cannot use stored procedures in a select or where clause. This is just one difference between a function and a stored procedure. There are several other differences, which we will talk about in a later session.

- To alter a function we use ALTER FUNCTION FuncationName statement and to delete it, we use DROP FUNCTION FuncationName.

31. Inline table valued functions in sql server Part 31

- A scalar function, returns a single value. on the other hand, an Inline Table Valued function, return a table. 

Syntax for creating an inline table valued function
CREATE FUNCTION Function_Name(@Param1 DataType, @Param2 DataType..., @ParamN DataType)
RETURNS TABLE
AS
RETURN (Select_Statement)

- Create a function that returns EMPLOYEES by GENDER.
CREATE FUNCTION fn_EmployeesByGender(@Gender nvarchar(10))
RETURNS TABLE
AS
RETURN (Select Id, Name, DateOfBirth, Gender, DepartmentId
      from tblEmployees
      where Gender = @Gender)
	  
- If you look at the way we implemented this function, it is very similar to SCALAR function, with the following differences
1. We specify TABLE as the return type, instead of any scalar data type
2. The function body is not enclosed between BEGIN and END block. Inline table valued function body, cannot have BEGIN and END block.
3. The structure of the table that gets returned, is determined by the SELECT statement with in the function.

Calling the user defined function
Select * from fn_EmployeesByGender('Male')

- As the inline user defined function, is returning a table, issue the select statement against the function, as if you are selecting the data from a TABLE.

- Where can we use Inline Table Valued functions
1. Inline Table Valued functions can be used to achieve the functionality of parameterized views. We will talk about views, in a later session.
2. The table returned by the table valued function, can also be used in joins with other tables.

- Joining the Employees returned by the function, with the Departments table
Select Name, Gender, DepartmentName 
from fn_EmployeesByGender('Male') E
Join tblDepartment D on D.Id = E.DepartmentId

32. Multi statement table valued functions in sql server Part 32

- Multi statement table valued functions are very similar to Inline Table valued functions, with a few differences. Let's look at an example, and then note the differences. 

- 
