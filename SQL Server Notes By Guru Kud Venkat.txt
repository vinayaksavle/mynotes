SQL Server Notes By Guru Kud Venkat

1. Install SQL Server 2019 Step by Step | Developer Edition | Free Software | Install SSMS

SSMS - Sequel Server Management Studio

- Enterprise and Standard are used for Production use, License costs, Enterprise has more features

- Express and Developer Edition are Free software, Express - 10GB limit, Developer same as Enterprise but for non production use.

- Database Server contains all the tables and data you know any sql server management objects that you create for ex. it could be trigger, view, tables data related to those tables all stored centrally on that database server and to connect to that database the client tool we generally use is SSMS (Sequel Server Management Studio). 

- SSMS is a client tool and not the server by itself. Developer machines (clients) connects to SQL Server using SSMS.

2. Creating altering and dropping a database - Part 2

- A SQL server database can be created, altered and dropped
i) Graphically using SqL Server Management Studio (SSMS) or
ii) Using a Query
Ex - CREATE DATABASE DBName

- The following two files will gets generated
.MDF file - Master Data File (Contains actual data) 
.LDF file - Transaction Log Data file (Used to recover the database)

- To alter DB,
ALTER DATABASE DBName MODIFY NAME = NewDBName

or 

Execute sp_renameDB 'OldDBName','NewDBName'

- To Delete or Drop a database
DROP DATABASE DBName

- Dropping a database, deletes the LDF and MDF files.

- You cannot drop a database, if it is currently in use. You get an error stating - Cannot drop database because it is currently in use.

- So, if other users are connected, you need to put the database in single user mode and then drop the database.
Alter Database DatabaseName SET SINGLE_USER WITH Rollback Immediate

- With Rollback Immediate option, will rollback all incomplete transactions and closes the connection to the database.

Note: System databases cannot be dropped.


3. Creating and working with tables - Part 3
https://www.youtube.com/watch?v=JLeaM8pK8dE&list=PL08903FB7ACA1C2FB&index=4&ab_channel=kudvenkat

- A primary key is used to identify uniquely each record in that table.

ALTER TABLE ForeignKeyTable ADD CONSTRAINT ForeignKeyTable_ForeignKeyColumn_FK FOREIGN KEY (ForeignKeyColumn) REFERENCES PrimaryKeyTable (PrimaryKeyColumn)

- Foreign keys are used to enforce database integrity. In layman's terms, A foreign key in one table points to a primary key in another table. The foreign key constraint prevents invalid data from being inserted into the foreign key column, has to be one of the values contained in the table it points to. 

4. Adding a default constraint - Part 4

- A column default can be specified using Default constraint. The DEFAULT constraint is used to insert a default value into a column. The default value will be added to all new records, if no other value is specified, including NULL.

Syntax:
Altering an existing column to add a default constraint:
ALTER TABLE {TABLE_NAME}
ADD CONSTRAINT {CONSTRAINT_NAME}
DEFAULT {DEFAULT_VALUE} FOR {EXISTING_COLUMN_NAME}

Adding a new column, with default value, to an existing table:
ALTER TABLE {TABLE_NAME}
ADD {COLUMN_NAME} {DATA_TYPE} {NULL | NOT NULL}
CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE}

Dropping a constarint:
ALTER TABLE {TABLE_NAME}
DROP CONSTRAINT {CONSTRAINT_NAME}

5. Cascading referential integrity constraint - Part 5

- Cascading referential integrity constraint allows to define the actions Microsoft SQL Server should take when a user attempts to delete or update a key to which an existing foreign keys points.

- For example, If you try to delete primary key of one table whose foreign key relation is there in other table column you will get error. So, Cascading referential integrity constraint can be used to define actions Microsoft SQL Server should take when this happens. By default, we get an error and the DELETE or UPDATE statement is roller back.

* Options when setting up Cascading referential integrity constraint:

i) No Action: This is the default behavior. No Action specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, an error s raised and the DELETE or UPDATE is rolled back.

ii) Cascade: Specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, all rows containing those foreign keys are also deleted or updated.

iii) Set NULL: Specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, all rows containing those foreign keys are set to NULL.

iv) Set Default: Specifies that if an attempt is made to delete or update a row with a key referenced by foreign keys in existing rows in other tables, all rows containing those foreign keys are set to default values.

6. Adding a check constraint - Part 6

- CHECK constraint is used to limit the range of the values, that can be entered for a column.

Syntax:
ALTER TABLE {TABLE_NAME}
ADD CONSTRAINT {CONSTRAINT_NAME} CHECK {BOOLEAN_EXPRESSION}

- If the BOOLEAN_EXPRESSION returns true, then the CHECK constraint allows the value, otherwise it doesn't. Since, AGE is a nullable column, it's possible to pass null for this column, when inserting a row. When you pass NULL for the AGE column, the boolean expression evaluates to UNKNOWN, and allows the value.

7. Identity Column in SQL Server - Part 7
https://www.youtube.com/watch?v=aOkFE6NLGCQ&list=PL08903FB7ACA1C2FB&index=8

- If a column is marked as an identity column, then the values for this column are automatically generated, when you insert a new row into the table.

Ex - CREATE TABLE tblPerson(
Id int identity(1,1) Primary Key
) 

- To explicitly supply a value for identity column
i. First turn on identity insert - SET Identity_Insert tblPerson ON
ii. In the insert query specify the column list
INSERT INTO tblPerson(Id,Name)values(2,'vvs')

- If you have deleted all the rows in a table, and you want to reset the identity column value, use DBCC CHECKIDENT command.
Ex: DBCC CHECKIDENT('tblPerson',RESEED,0)


8. How to get the last generated identity column value in SQL Server - Part 8

- Identity column values are auto generated. There are several ways in SQL server, to retrieve the last identity value that is generated. The most common way is to use SCOPE_IDENTITY() build in function.

Note: You can also use @@IDENTITY and IDENT_CURRENT('tableName')

Session - It is connection to the SQL Server.
Difference:
SCOPE_IDENTITY() - Same session and the same scope. Prefer this.
@@IDENTITY - Same session and across any scope.
IDENT_CURRENT('TableName') - Specific table across any session and any scope.

https://www.youtube.com/watch?v=n1iwngG_zNY&list=PL08903FB7ACA1C2FB&index=9

Do watch video
!Important for blog topic.

9. Unique key constraint - Part 9

- We use UNIQUE constarint to enforce uniqueness of a column i.e, the column shouldn't allow any duplicate values. We can add a unique constraint through the designer or using a query.

- To create the unique key using a query:
ALTER TABLE table_name
ADD CONSTRAINT constraint_name UNIQUE(column_name)

- But primary key and unique key are used to enforce, the uniqueness of a column. So, when do you chosse one over the other ?
A table can have, only one primary key. If you want to enforce uniqueness on 2 or more columns, then we use unique key constraint.

- What is the difference betwen Primary key constraint and Unique key constraint ?
i. A table can have only one primary key, but more than one unique key.
ii. Primary key does not allow nulls, where as unique key allows one null.

10. Select statement in sql server - Part 10
- selecting distinct rows
SELECT DISTINCT Name,City FROM tblPerson

It distinct name and city columns so there are chances that duplicate city might come but rows will be distinct.

- Wild Cards
% - Specifies zero or more characters
_ - Specifies exactlt one character.
[] - Any character with in the brackets
[^] - Not any character with in the brackets.

Ex -
SELECT * FROM tblPerson WHERE email LIKE '_@_.com'
// A@A.com

SELECT * FROM tblPerson WHERE Name LIKE '[MST]%'
// Tom,Mary,Sam

SELECT top 5 * from tblPerson
SELECT top 50 Percent * from tblPerson

11. Group by in sql server - Part 11

https://www.youtube.com/watch?v=FKSSOpQe5Jc&list=PL08903FB7ACA1C2FB&index=12

- 
